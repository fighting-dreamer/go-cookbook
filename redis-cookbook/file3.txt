The next thing we must do in our code is to set up an HTTP server system on top of which Socket.io will do its websocket magic. Here are the lines to do that:
server = http.createServer(function(req, res){
// we may want to redirect a client that hits this page // to the chat URL instead
res.writeHead(200, {'Content-Type': 'text/html'}); res.end('<h1>Hello world</h1>');
});
// Set up our server to listen on 8000 and serve socket.io server.listen(8000);
var socketio = io.listen(server);
If you have some experience with Node.js or Socket.IO, this code is pretty straightfor- ward. What we’re basically doing is setting up an HTTP server, specifying how it will reply to requests, making it listen on a port (in this case, we’re going to listen on port 8000), and attaching Socket.IO to it so that it can automatically serve the Socket.IO JavaScript files and set up the websocket functionality.
Now we set up the small bits of Redis code to support our functionality . The Redis client we set up with Node.js must subscribe to a specific chat channel, and deal with messages on that channel when they arrive. So that’s what we do next:
// if the Redis server emits a connect event, it means we're ready to work, // which in turn means we should subscribe to our channels. Which we will. rc.on("connect", function() {
rc.subscribe("chat");
// we could subscribe to more channels here });
// When we get a message in one of the channels we're subscribed to, // we send it over to all connected clients.
rc.on("message", function (channel, message) {
console.log("Sending: " + message);
socketio.sockets.emit('message', message); })
As you can see, our actual Redis code is extremely simple. All we do is listen